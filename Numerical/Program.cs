using CsharpALG.Numerical;
test_linspace();
test_bspline();

void test_linspace()
{
    // foreach(var x in Utility.linspace(1.0, 17.0, 17))
    // {
    //     Console.Write($"{x} ");
    // }
    // Console.WriteLine();
    double[] elems = Utility.linspace(1.0, 17.0, 17).ToArray();
    Console.WriteLine($"{Utility.ArrToString(elems)}");
}

void test_bspline()
{
    _test_bspline(-5.0, 5.0, 8, 64, 4);
}

testLUFullPivot();

testSolve();

void testLUFullPivot()
{
    Console.WriteLine("testLUFullPivot");
    double[,] A = new double[6, 6]{
        { 0.6507243 ,  0.60397494, -0.166312  ,  0.60373338,  0.69549304,
         1.27848531},
       { 0.31783923, -0.26187952,  0.29240419, -0.42975706, -0.16683741,
        -0.78417863},
       { 1.43250853, -0.91312242,  0.22364118, -2.56178452, -2.64469449,
         0.41898378},
       {-0.27835331,  0.41572357, -1.00932634, -0.21634919, -0.9156908 ,
         0.15606333},
       { 1.20823136, -1.13378592,  0.72136082, -0.38756887, -0.39205936,
         0.19640329},
       { 1.53353118,  1.24952624, -0.53950851,  0.86485211, -1.14853424,
         2.32183358}
    };
    _testLUFullPivot(A);

    // rank == 5
    A = new double[10, 10]{
{80.43604778060805,-50.74807485621817,-225.86773058335854,-160.72091318464717,385.0149183306574,-149.02621736121492,-335.4151957259513,-344.6009404913548,-335.2605482267729,-122.66304872447091},
{334.80201791850584,-253.23719505622506,-222.69017821155734,-262.2550090825297,-116.22047117928433,-30.482101503828765,-669.7474839735934,242.76358965504755,-559.2615224740191,-609.0053239353512},
{-60.199737046363964,491.3567341396999,-307.08360733457124,661.5757814054326,107.94038496816506,300.4979730373869,52.84534971278555,-65.96509559930506,-59.99396842229325,424.22941331917986},
{421.50594798245527,-548.1914089681786,95.79714738289992,-476.73254845750586,-63.768464037187194,491.62552370834453,-406.75740216355524,-617.4927360200998,413.09438491976925,-513.3955634933454},
{192.9001800291231,-557.2709288788799,1061.9947220695085,-1538.668877322873,79.50192513670098,-595.3592368785505,143.51161822606758,477.8251177867155,1033.020837522371,-1140.1699490668184},
{166.9216443791255,-541.0383113483344,483.4644694273961,-624.5276990651289,-499.96433991714036,-31.671109328068205,17.271566126679506,376.6273428999645,368.9579016449749,-569.7444108880079},
{-107.45885540330619,-503.9267837495024,477.2646794568028,-629.8648383048434,169.95694050796243,-89.1527878560795,381.7406518727695,-732.8662508091336,712.6678189799943,34.42709305692899},
{2.218689259029518,-572.5495173803572,520.3551293227234,-988.0108980528836,-1.1596306098385136,-589.8691107162923,50.10099517720544,163.16114490750013,177.49387335919405,-565.8479815796513},
{138.3569019125175,-252.6931710749851,171.98205659727023,-494.19277946057855,238.54104538661136,-50.79745875679775,-132.3838814991938,-334.04170148148387,275.9874441604167,-325.06109224023197},
{-65.72290757480607,-366.70182850449464,365.7587873697493,-360.76016626378396,284.72928837546993,284.535622332348,409.0339682017255,-1144.4463162872955,962.3043230323658,256.96699682200665},
    };

    _testLUFullPivot(A);
}

void testSolve()
{
    Console.WriteLine("testSolve");
    double[,] A = new double[10, 10]
    {
{-365.3575287196817,-740.215844778857,5.437756471458902,649.0748963049565,472.93106383288006,-26.812662827336872,295.58330635180755,659.1841993555499,-541.5326141830009,-595.7139429192065},
{-936.8463945715527,-1719.4237306795485,73.9324626388504,411.3581441555095,317.2895586064727,143.89658373641117,-181.91103020648526,908.6028025593655,-650.5414196541362,-1576.3057494996315},
{-133.44177274945088,-1166.0469091169969,-86.74831801158942,-6.910513430265022,616.0452479287685,82.14021932695458,-608.558015399083,1040.3442631275664,660.3243523376633,-538.2540139440101},
{279.0827299988821,1082.6860599177032,-546.5834900948549,-1316.8533298852094,755.3733493033726,-261.6445876260986,655.1293617664129,-556.7667549762464,1220.125378082426,653.5038245873601},
{-64.90166311419655,105.28260739489251,-310.77918353238533,-1246.5654959431834,312.56422647416684,-145.32477715957447,-150.34024957753545,-572.8999895356592,1073.5886843862324,-162.58454219049227},
{509.47976216146543,248.52519031457715,-58.22193661814745,-650.3492277363797,-138.33698266327664,160.09987097819715,-750.5697082857147,195.93216944231906,1120.2142977773394,641.7652311766984},
{-129.8047653930199,-527.6904040503206,-175.46016140555477,632.2526592403299,996.4057607887845,-45.20569233565806,544.7408379917259,1167.1181803528104,-146.08224813599668,-177.32442542905827},
{-623.2613903257693,-389.57340629616914,-310.97557500482344,413.2454095636984,1171.8425694074726,-229.76146803956223,1310.5006725124658,562.4897078493752,-668.9351687645667,-702.2873540901888},
{-7.209300505910179,47.99138429404434,-46.5660188513372,42.530993094201975,184.83068332620937,-192.35268999691465,195.02083372887975,-352.5100574252458,-3.262158426652566,-70.70095232345535},
{-210.38446477710391,-713.1033514976025,182.57546670074265,869.8473683225714,93.12899545420404,-108.9798135909228,-17.435924552879023,163.782422760808,-640.7946926345497,-530.2632706502833}
    };
    double[] b = [-0.7164010059500501, 1.0365736233420006, 1.7936691055622056, 0.2554702678790001, -2.374315063951439, 2.2099837794573367, 0.18284154681837053, 1.720496618632065, -1.4795927483487459, 0.35323914751918783];
    _testSolve(A, b);
}

void _test_bspline(double start, double end, int knotSize, int gridSize, int order)
{
    double[] knots = Utility.linspace(start, end, knotSize).ToArray();
    BSpline splines = new BSpline(knots);

    // foreach B_{i, p} evaluate there values at start to end with gridSize
    // table index by (knot, x)
    List<double[]> table = new List<double[]>();

    // when order = 0 -> knotSize - 1 splines
    // when order = k -> knotSize - 1 - k splines
    for (int i = 0; i < knotSize - 1 - order; ++i)
        table.Add(new double[gridSize]);

    int idx = 0;
    foreach (double x in Utility.linspace(start, end, gridSize))
    {
        double[] splineValues = splines.Eval(x, order);
        for (int i = 0; i < splineValues.Length; ++i)
        {
            table[i][idx] = splineValues[i];
        }
        idx += 1;
    }

    // print values
    Console.WriteLine("grid:");
    double[] xs = Utility.linspace(start, end, gridSize).ToArray();
    Console.WriteLine($"{Utility.ArrToString(xs)}");

    Console.WriteLine("splines:");
    foreach (var values in table)
    {
        Console.WriteLine($"{Utility.ArrToString(values)},");
    }
}

void _testLUFullPivot(double[,] A)
{
    double[,] B = (double[,])A.Clone();
    int[] rowPivot, colPivot;
    int rank = LinearAlg.LUDecompositionFullPivot(B, out rowPivot, out colPivot);

    // extract L, U from B
    int n = A.GetLength(0);
    double[,] L = new double[n, n];
    double[,] U = new double[n, n];

    for (int i = 0; i < n; ++i) L[i, i] = 1.0;
    for (int i = 0; i < n; ++i)
    {
        for (int j = 0; j < n; ++j)
        {
            // lower half
            if (i > j)
            {
                L[i, j] = B[i, j];
            }
            else
            {
                U[i, j] = B[i, j];
            }
        }
    }

    // check if PAQ^T = LU
    // <=> A = P^T (LU) Q
    double[,] mult = LinearAlg.MatMul(L, U);
    for (int i = rank - 1; i >= 0; --i)
    {
        // swap mult[i,:] with mult[pivot[i]:]
        for (int j = 0; j < n; ++j)
        {
            (mult[i, j], mult[rowPivot[i], j]) = (mult[rowPivot[i], j], mult[i, j]);
        }
    }

    for (int j = rank - 1; j >= 0; --j)
    {
        // swap mult[:,j] with mult[:,pivot[j]]
        for (int i = 0; i < n; ++i)
        {
            (mult[i, j], mult[i, colPivot[j]]) = (mult[i, colPivot[j]], mult[i, j]);
        }
    }

    double err = LinearAlg.L2Norm(LinearAlg.MatMinus(A, mult));
    Console.WriteLine($"reconstruct error: {err}, rank={rank}");
}

void _testSolve(double[,] A, double[] b)
{
    double[] x = LinearAlg.Solve(A, b);

    double[] z = new double[x.Length];
    double err = 0;
    for (int i=0; i < x.Length; ++i)
    {
        for (int j=0; j < x.Length; ++j)
        {
            z[i] += A[i, j] * x[j];
        }

        err += (z[i] - b[i]) * (z[i] - b[i]);
    }
    err = Math.Sqrt(err);
    Console.WriteLine($"reconstruct error: {err}");
}